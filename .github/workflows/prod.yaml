name: np-prod

on:
  push:
    branches:
      - main

env:
  NP_PREFIX: prod
  GKE_CLUSTER: ${{ secrets.NODEPEN_GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.NODEPEN_GKE_ZONE }}
  DOCKER_TAG_PREFIX: gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/
  DOCKER_TAG_SUFFIX: :prod-${{ github.sha }}

jobs:
  dependencies-glib:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
          cache: "npm"
          cache-dependency-path: lib/package-lock.json
      - name: Build glib
        working-directory: ./lib
        run: |
          npm ci
          npm run build
      - name: Upload glib artifacts
        uses: actions/upload-artifact@master
        with:
          name: glib
          path: |
            lib/
            !lib/node_modules/
          retention-days: 1
  dependencies-gate:
    runs-on: ubuntu-latest
    needs:
      - dependencies-glib

    steps:
      - name: Assert success
        run: echo ðŸŽ‰
  build-app:
    runs-on: ubuntu-latest
    needs: dependencies-gate

    env:
      SERVICE_NAME: np-app
      NODEPEN_API_ENDPOINT: https://api.nodepen.io/graphql

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
          cache: "npm"
          cache-dependency-path: app/package-lock.json
      - name: Download glib artifacts
        uses: actions/download-artifact@v2
        with:
          name: glib
          path: app/glib/
      - name: Restore glib dependencies
        working-directory: ./app/glib
        run: npm ci
      - name: Restore app dependencies
        working-directory: ./app
        run: npm ci
      - name: Restore app build cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/app/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/app/package-lock.json') }}-${{ hashFiles('**/app/**.[jt]s', '**/app/**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/app/package-lock.json') }}-
      - name: Restore client secrets
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "firebase.client.auth.json"
          dir: "app/features/common/context/session/auth/"
          json: ${{ secrets.NODEPEN_APP_SECRET_AUTH }}
      - name: Restore server secrets
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "firebase.server.auth.json"
          dir: "app/features/common/context/session/auth/"
          json: ${{ secrets.NODEPEN_API_SECRET_AUTH }}
      - uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.NODEPEN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.NODEPEN_GCP_TOKEN }}
          export_default_credentials: true
      - name: Setup GCR
        run: gcloud auth configure-docker
      - uses: docker/build-push-action@v2
        with:
          context: ./app
          build-args: |
            NODEPEN_API_ENDPOINT=${{ env.NODEPEN_API_ENDPOINT }}
          push: true
          tags: |
            gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod
            gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod-${{ github.sha }}
  build-api:
    runs-on: ubuntu-latest
    needs: dependencies-gate

    env:
      SERVICE_NAME: np-api

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
          cache: "npm"
          cache-dependency-path: api/package-lock.json
      - name: Download glib artifacts
        uses: actions/download-artifact@v2
        with:
          name: glib
          path: api/glib/
      - name: Restore glib dependencies
        working-directory: ./api/glib
        run: npm ci
      - name: Restore api secrets
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "auth.json"
          dir: "api/src/firebase/auth/"
          json: ${{ secrets.NODEPEN_API_SECRET_AUTH }}
      - uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.NODEPEN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.NODEPEN_GCP_TOKEN }}
          export_default_credentials: true
      - name: Setup GCR
        run: gcloud auth configure-docker
      - uses: docker/build-push-action@v2
        with:
          context: ./api
          push: true
          tags: |
            gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod
            gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod-${{ github.sha }}
  build-bq-io:
    runs-on: ubuntu-latest
    needs: dependencies-gate

    env:
      SERVICE_NAME: np-bq-io

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
          cache: "npm"
          cache-dependency-path: bq/io/package-lock.json
      - name: Download glib artifacts
        uses: actions/download-artifact@v2
        with:
          name: glib
          path: bq/io/glib/
      - name: Restore glib dependencies
        working-directory: ./bq/io/glib
        run: npm ci
      - name: Restore server secrets
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "auth.json"
          dir: "bq/io/src/firebase/auth/"
          json: ${{ secrets.NODEPEN_API_SECRET_AUTH }}
      - uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.NODEPEN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.NODEPEN_GCP_TOKEN }}
          export_default_credentials: true
      - name: Setup GCR
        run: gcloud auth configure-docker
      - uses: docker/build-push-action@v2
        with:
          context: ./bq/io
          push: true
          tags: |
            gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod
            gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod-${{ github.sha }}
  build-bq-render:
    runs-on: ubuntu-latest
    needs: dependencies-gate

    env:
      SERVICE_NAME: np-bq-render

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "12"
          cache: "npm"
          cache-dependency-path: bq/render/package-lock.json
      - name: Download glib artifacts
        uses: actions/download-artifact@v2
        with:
          name: glib
          path: bq/render/glib/
      - name: Restore glib dependencies
        working-directory: ./bq/render/glib
        run: npm ci
      - name: Restore server secrets
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "auth.json"
          dir: "bq/render/src/firebase/auth/"
          json: ${{ secrets.NODEPEN_API_SECRET_AUTH }}
      - uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.NODEPEN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.NODEPEN_GCP_TOKEN }}
          export_default_credentials: true
      - name: Setup GCR
        run: gcloud auth configure-docker
      - uses: docker/build-push-action@v2
        with:
          context: ./bq/render
          push: true
          tags: |
            gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod
            gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod-${{ github.sha }}
  build-bq-gh-dispatch:
    runs-on: self-hosted
    needs: dependencies-gate

    env:
      SERVICE_NAME: np-bq-gh-dispatch

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Download glib artifacts
        uses: actions/download-artifact@v2
        with:
          name: glib
          path: bq/gh/dispatch/glib/
      - name: Restore glib dependencies
        working-directory: ./bq/gh/dispatch/glib
        run: npm ci
      - name: Build ${{ env.SERVICE_NAME }}
        env:
          DOCKER_TAG: gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod
          DOCKER_TAG_VERBOSE: gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod-${{ github.sha }}
        run: |
          cd bq/gh/dispatch
          docker build -t ${{ env.DOCKER_TAG }} .
          docker push ${{ env.DOCKER_TAG }}
          docker tag ${{ env.DOCKER_TAG }} ${{ env.DOCKER_TAG_VERBOSE }}
          docker push ${{ env.DOCKER_TAG_VERBOSE }}
  build-bq-gh-compute:
    runs-on: self-hosted
    needs: dependencies-gate

    env:
      SERVICE_NAME: np-bq-gh-compute

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build ${{ env.SERVICE_NAME }}
        env:
          DOCKER_TAG: gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod
          DOCKER_TAG_VERBOSE: gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:prod-${{ github.sha }}
        run: |
          cd bq/gh/compute
          docker build -t ${{ env.DOCKER_TAG }} --build-arg NODEPEN_RHINO_TOKEN=${{ secrets.NODEPEN_RHINO_TOKEN }} .
          docker push ${{ env.DOCKER_TAG }}
          docker tag ${{ env.DOCKER_TAG }} ${{ env.DOCKER_TAG_VERBOSE }}
          docker push ${{ env.DOCKER_TAG_VERBOSE }}
  build-gate:
    runs-on: ubuntu-latest
    needs:
      - build-app
      - build-api
      - build-bq-io
      - build-bq-render
      - build-bq-gh-compute
      - build-bq-gh-dispatch

    steps:
      - name: Assert success
        run: echo ðŸŽ‰
  deploy-app:
    runs-on: ubuntu-latest
    needs: build-gate

    steps:
      - uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.NODEPEN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.NODEPEN_GCP_TOKEN }}
          export_default_credentials: true
      - name: Deploy np-app
        run: |
          gcloud run deploy np-app \
            --image=gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/np-app:prod \
            --region=${{ secrets.NODEPEN_GCP_REGION }} \
            --allow-unauthenticated
  deploy-api:
    runs-on: ubuntu-latest
    needs: build-gate

    steps:
      - uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.NODEPEN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.NODEPEN_GCP_TOKEN }}
          export_default_credentials: true
      - name: Deploy np-api
        run: |
          gcloud run deploy np-api \
            --image=gcr.io/${{ secrets.NODEPEN_GCP_PROJECT_ID }}/np-api:prod \
            --region=${{ secrets.NODEPEN_GCP_REGION }} \
            --set-env-vars=NP_API_PORT=8080,NP_GLOBAL_PREFIX=${{ env.NP_PREFIX }},NP_DB_HOST=${{ secrets.NODEPEN_REDIS_HOST }},NP_DB_PORT=${{ secrets.NODEPEN_REDIS_PORT }} \
            --allow-unauthenticated
  deploy-bq:
    runs-on: ubuntu-latest
    needs: build-gate

    env:
      NP_TAG: prod-${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          project_id: ${{ secrets.NODEPEN_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.NODEPEN_GCP_TOKEN }}
          export_default_credentials: true
      - uses: azure/setup-helm@v1
      - run: gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"
      - name: Deploy
        run: |
          helm upgrade np-prod ./.charts/np-prod --namespace=default \
            --set=app.name=np-prod \
            --set=app.version=${{ github.sha }} \
            --set=redisHost=${{ secrets.NODEPEN_REDIS_HOST }} \
            --set=redisPort=${{ secrets.NODEPEN_REDIS_PORT }} \
            --set=projectId=${{ secrets.NODEPEN_GCP_PROJECT_ID }} \
            --set=tag="$NP_TAG" \
            --install
